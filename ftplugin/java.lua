-- local home = os.getenv 'HOME'
-- local workspace_path = home .. '/.local/share/nvim/mason/bin/jdtls'
-- local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ':p:h:t')
-- local workspace_dir = workspace_path .. project_name
--
-- local status, jdtls = pcall(require, 'jdtls')
-- if not status then
--   return
-- end
-- local extendedClientCapabilities = jdtls.extendedClientCapabilities
--
-- local config = {
--   cmd = {
--     'java',
--     '-Declipse.application=org.eclipse.jdt.ls.core.id1',
--     '-Dosgi.bundles.defaultStartLevel=4',
--     '-Declipse.product=org.eclipse.jdt.ls.core.product',
--     '-Dlog.protocol=true',
--     '-Dlog.level=ALL',
--     '-Xmx1g',
--     '--add-modules=ALL-SYSTEM',
--     '--add-opens',
--     'java.base/java.util=ALL-UNNAMED',
--     '--add-opens',
--     'java.base/java.lang=ALL-UNNAMED',
--     '-javaagent:' .. home .. '/.local/share/nvim/mason/packages/jdtls/lombok.jar',
--     '-jar',
--     vim.fn.glob(home .. '/.local/share/nvim/mason/packages/jdtls/plugins/org.eclipse.equinox.launcher_*.jar'),
--     '-configuration',
--     home .. '/.local/share/nvim/mason/packages/jdtls/config_mac',
--     '-data',
--     workspace_dir,
--   },
--   root_dir = require('jdtls.setup').find_root { '.git', 'mvnw', 'gradlew', 'pom.xml', 'build.gradle' },
--
--   settings = {
--     java = {
--       signatureHelp = { enabled = true },
--       extendedClientCapabilities = extendedClientCapabilities,
--       maven = {
--         downloadSources = true,
--       },
--       referencesCodeLens = {
--         enabled = true,
--       },
--       references = {
--         includeDecompiledSources = true,
--       },
--       inlayHints = {
--         parameterNames = {
--           enabled = 'all', -- literals, all, none
--         },
--       },
--     },
--   },
--
--   init_options = {
--     bundles = {},
--   },
-- }
-- require('jdtls').start_or_attach(config)
--
-- vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, { desc = 'LSP declaration' })
-- vim.keymap.set('n', 'gd', vim.lsp.buf.definition, { desc = 'LSP definition' })
-- vim.keymap.set('n', 'gr', vim.lsp.buf.references, { desc = 'LSP references' })
-- vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, { desc = 'LSP implementation' })
-- vim.keymap.set('n', 'K', vim.lsp.buf.hover, { desc = 'LSP hoveer' })
-- vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, { desc = 'LSP rename' })
-- vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, { desc = 'LSP code action' })
-- vim.keymap.set('n', '<leader>ds', vim.lsp.buf.document_symbol, { desc = 'Document Symbols' })
-- vim.keymap.set('n', '<leader>ws', vim.lsp.buf.workspace_symbol, { desc = 'Workspace Symbols' })
-- vim.keymap.set('n', '<leader>sd', vim.diagnostic.open_float, { desc = 'Show Diagnostics' })
-- vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = 'Previous Diagnostic' })
-- vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = 'Next Diagnostic' })
